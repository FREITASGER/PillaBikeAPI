openapi: 3.0.2
servers:
  - url: https://api.pillabike.com
info:
  description: API for bicycle rental in different cities

  version: "1.0"
  title: Pilla Bike API
tags:
  - name: Bikes
    description: Bikes operations
  - name: Parkings
    description: Parkings operations
paths:
  /bikes:
    get:
      tags:
        - Bikes
      summary: Bikes' list
      description: It obtains the information of all available bicycles
      operationId: getBikes
      responses:
        '200':
          description: The list of bicycles is returned correctly
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bike'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /bikes/{bikeId}:
    get:
      tags:
        - Bikes
      summary: It obtains the information of a specific bike
      description: It obtains the information of the bike whose id is given in the URL
      operationId: getBike
      parameters:
        - $ref: '#/components/parameters/BikeId'
      responses:
        '200':
          description: Bike information is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeInformation'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Bikes
      summary: Delete a bike
      description: Delete a bike from the catalog based on the bikeId
      operationId: deleteBike
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Bikes
      summary: Modify a bike
      description: It modifies the information of the bike whose id is given in the URL
      operationId: putBike
      requestBody:
        - $ref: '#/components/requestBodies/Bike'
      responses:
        '200':
          description: The bike has been successfully modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BikeInformation'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /parkings/{parkingId}/bikes:
   post:
     tags:
       - Bikes
     summary: Registration of a new bike
     description: It registers a new bike in a certain parking, whose id is given in the URL
     operationId: postBike
     parameters:
       - $ref: '#/components/parameters/ParkingId'
     requestBody:
       content:
         application/json:
           schema:
             $ref: '#/components/schemas/Bike'
     responses:
       '201':
         description: The bike is registered successfully
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Bike'
       '400':
         $ref: '#/components/responses/BadRequest'
       '500':
         $ref: '#/components/responses/InternalServerError'
  /parkings:
    get:
      tags:
        - Parkings
      summary: Parking's list
      description: It obtains the information of all parkings
      operationId: getParkings
      responses:
        '200':
          description: The list of parkings is returned correctly
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Parking'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Parkings
      summary: Registration of a new parking
      description: It registers a new parking in the business
      operationId: postParking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Parking'
      responses:
        '201':
          description: The parking is registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Parking'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /parkings/{parkingId}:
    get:
      tags:
        - Parkings
      summary: It obtains the information of a specific parking
      description: It obtains the information of the parking whose id is given in the URL
      operationId: getParking
      parameters:
        - $ref: '#/components/parameters/ParkingId'
      responses:
        '200':
          description: Parking information is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingInformation'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Parkings
      summary: Delete a parking
      description: Delete a parking from the app based on the bikeId
      operationId: deleteParking
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Parkings
      summary: Modify a parking
      description: It modifies the information of the parking whose id is given in the URL
      operationId: putParking
      requestBody:
        - $ref: '#/components/requestBodies/Parking'
      responses:
        '200':
          description: The parking has been successfully modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParkingInformation'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    Bike:
      type: object
      properties:
        id:
          type: number
          description: Bike id
          example: 1
        buyDate:
          type: date
          description: Bike buy date
          example: 2023-05-14
        electric:
          type: boolean
          description: It indicates if the bike is electric or not
          example: true
        description:
          type: string
          description: It provides a description of the bike model
          example:
        price:
          type: number
          description: Bike price
          example:
    Parking:
      type: object
      properties:
        id:
          type: number
          description: Parking id
          example: 1
        name:
          type: string
          description: Parking name
          example: norte
        city:
          type: string
          description: Parking city
          example: Zaragoza
        open:
          type: time
          description: Opening time
          example: 9:00
        close:
          type: time
          description: Closing time
          example: 20:00
        isFull:
          type: boolean
          description: It indicates if the parking lot is full
          example:
    BikeInformation:
      type: object
      allOf:
        - $ref: '#/components/schemas/Bike'
      properties:
        id:
          type: integer
          description: Bike ID
          example: 2
    ParkingInformation:
      type: object
      allOf:
        - $ref: '#/components/schemas/Parking'
      properties:
        id:
          type: integer
          description: Parking ID
          example: 5
    BadRequest:
      type: object
      properties:
        code:
          type: string
          description: status code
          example: 404
        message:
          type: string
          description: Error message
          example: Validation error
        errors:
          type: array
          items:
            - $ref: '#/components/schemas/ErrorField'
    ErrorField:
      type: object
      description: Validation error on an input field
      properties:
        fieldName:
          type: string
          description: The field where the error occurred
          example: buyDate
        message:
          type: string
          description: Error message associated with the field
          example: This field is required
    NotFound:
      type: object
      properties:
        code:
          type: string
          description: Status code
          example: 404
        message:
          type: string
          description: Error message
          example: Bike not found
    InternalServerError:
      type: object
      properties:
        code:
          type: string
          description: Status code
          example: 500
        message:
          type: string
          description: Error message
          example: Internal Server Error
  responses:
    NoContent:
      description: No Content
    BadRequest:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'
  parameters:
    BikeId:
      - name: bikeId
        in: path
        description: Bike ID
        required: true
        schema:
          type: integer
    ParkingId:
      - name: parkingId
        in: path
        description: Parking ID
        required: true
        schema:
          type: integer
  requestBodies:
    Bike:
      description: New bike data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Bike'
    Parking:
      description: New parking data
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Parking'